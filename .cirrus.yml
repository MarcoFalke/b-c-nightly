container:
  cpu: 2
  memory: 8G
  greedy: true
timeout_in: 120m
env:
  TEST_RUNNER_PORT_MIN: "14000"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache
  DEBIAN_FRONTEND: "noninteractive"
task:
  name: "FreeBSD [system libs]"
  freebsd_instance:
    image_family: freebsd-14-0  # https://cirrus-ci.org/guide/FreeBSD/
    cpu: 2
    memory: 8G
  env:
    MAKEJOBS: "-j4"
    CONFIGURE_OPTS: "--disable-dependency-tracking --enable-suppress-external-warnings"
    CCACHE_SIZE: "200M"
    CCACHE_COMPRESS: 1
    CCACHE_DIR: "/tmp/ccache_dir"
  ccache_cache:
    folder: "/tmp/ccache_dir"
  install_script:
    - pkg install -y e2fsprogs m4 autoconf automake boost-libs git gmake libevent libtool pkgconf python3 ccache sqlite3 databases/py-sqlite3
    - ccache --max-size=${CCACHE_SIZE}
    - git clone https://github.com/stewartsmith/libeatmydata.git
    - cd libeatmydata
    - autoreconf -i
    - ./configure
    - sed -i -e 's/O_DSYNC/O_SYNC/g' $(git grep -l O_DSYNC)
    - make
    - make install  # eatmydata
  upstream_clone_script:
    - git clone https://github.com/bitcoin/bitcoin --depth=1 ./bitcoin-core
    - cd bitcoin-core
    - gmake -C depends NO_BOOST=1 NO_LIBEVENT=1 NO_QT=1 NO_SQLITE=1 NO_NATPMP=1 NO_UPNP=1 NO_ZMQ=1 NO_USDT=1
  configure_script:
    - cd bitcoin-core
    - ./autogen.sh
    - ./configure ${CONFIGURE_OPTS} BDB_LIBS="-L$(pwd)/depends/$(./depends/config.guess)/lib -ldb_cxx-4.8" BDB_CFLAGS="-I$(pwd)/depends/$(./depends/config.guess)/include" || ( cat config.log && false)
  make_script:
    - cd bitcoin-core
    - gmake ${MAKEJOBS} || ( echo "Build failure. Verbose build follows." && gmake V=1 ; false )
  check_script:
    - cd bitcoin-core
    - gmake check ${MAKEJOBS} VERBOSE=1
  functional_test_script:
    - cd bitcoin-core
    - eatmydata ./test/functional/test_runner.py $MAKEJOBS --ci --extended --combinedlogslen=19999000 --quiet --failfast --timeout-factor=20
task:
  name: "OpenSuse Tumbleweed [system libs]"
  container:
    image: opensuse/tumbleweed
  env:
    MAKEJOBS: "-j6"
    TEST_RUNNER_PORT_MIN: "14000"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache
    CCACHE_SIZE: "200M"
    CCACHE_DIR: "/tmp/ccache_dir"
  ccache_cache:
    folder: "/tmp/ccache_dir"
  install_script:
    - zypper --non-interactive install -t pattern devel_basis
    - zypper --non-interactive install e2fsprogs git libtool pkg-config automake python3 libevent-devel libboost_headers-devel gcc-c++ ccache zeromq-devel libqt5-qtbase-devel libqt5-qttools-devel qrencode-devel sqlite3-devel
    - ccache --max-size=${CCACHE_SIZE}
  upstream_clone_script:
    - git clone https://github.com/bitcoin/bitcoin --depth=1 ./bitcoin-core
  configure_script:
    - cd bitcoin-core
    - ./autogen.sh
    - ./configure || ( cat config.log && false)
  make_script:
    - cd bitcoin-core
    - make ${MAKEJOBS} || ( echo "Build failure. Verbose build follows." && make V=1 ; false )
  check_script:
    - cd bitcoin-core
    - make check ${MAKEJOBS} VERBOSE=1
  functional_test_script:
    - cd bitcoin-core
    - ./test/functional/test_runner.py $MAKEJOBS --ci --extended --combinedlogslen=199999000 --quiet --failfast --timeout-factor=3
task:
  compute_engine_instance:
    image_project: ubuntu-os-cloud
    image: family/ubuntu-2204-lts
    disk: 70
    cpu: 4
    memory: 16G
  env:
    MAKEJOBS: "-j6"  # Reduce jobs to avoid OOM under gcc
    TEST_RUNNER_PORT_MIN: "14000"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache
    CCACHE_SIZE: "200M"
    CCACHE_DIR: "/tmp/ccache_dir"
  ccache_cache:
    folder: "/tmp/ccache_dir"
  info_script:
    - free -m -h
    - nproc
    - uname --kernel-name --kernel-release
    - lscpu
    - df -h
  install_script:
    - apt update && apt install -y git && apt install -y git ccache build-essential libtool autotools-dev automake pkg-config bsdmainutils python3-zmq libevent-dev libboost-dev qttools5-dev qttools5-dev-tools systemtap-sdt-dev libminiupnpc-dev libnatpmp-dev libqrencode-dev libzmq3-dev
    - ccache --max-size=${CCACHE_SIZE}
  upstream_clone_script:
    - git clone https://github.com/bitcoin/bitcoin --depth=1 ./bitcoin-core
    - cd bitcoin-core
    - ./autogen.sh
  matrix:
    - name: "ubuntu:devel [system libs, asan, clang, sqlite-only, libc++]"
      install_matrix_script:
        - apt install -y libc++abi-dev libc++-dev clang llvm libsqlite3-dev
        - cd bitcoin-core
        - ./configure --with-sanitizers=address,integer,undefined CC=clang CXX="clang++ -stdlib=libc++" || ( cat config.log && false)
    - name: "ubuntu:devel [system libs, asan, clang, sqlite-only]"
      install_matrix_script:
        - apt install -y clang llvm libsqlite3-dev
        - cd bitcoin-core
        - ./configure --with-sanitizers=address,integer,undefined CC=clang CXX="clang++" || ( cat config.log && false)
    - name: "ubuntu:devel [system libs, asan, gcc, bdb-only]"
      install_matrix_script:
        - apt install -y libdb++-dev
        - cd bitcoin-core
        - echo 'nonnull-attribute:streams.h'   >> test/sanitizer_suppressions/ubsan  # runtime error: null pointer passed as argument 1, which is declared to never be null, fwrite
        - echo 'nonnull-attribute:streams.cpp' >> test/sanitizer_suppressions/ubsan  # runtime error: null pointer passed as argument 1, which is declared to never be null, fwrite
        - ./configure --with-sanitizers=address,undefined --with-incompatible-bdb || ( cat config.log && false)
    - name: "ubuntu:devel [system libs, tsan, clang, sqlite-only, libc++]"
      install_matrix_script:
        - apt install -y libc++abi-dev libc++-dev clang llvm libsqlite3-dev
        - cd bitcoin-core
        - ./configure --with-sanitizers=thread CC=clang CXX="clang++ -stdlib=libc++" || ( cat config.log && false)
    - name: "ubuntu:devel [system libs, tsan, clang, sqlite-only]"
      install_matrix_script:
        - apt install -y clang llvm libsqlite3-dev
        - cd bitcoin-core
        - ./configure --with-sanitizers=thread CC=clang CXX="clang++" || ( cat config.log && false)
    - name: "ubuntu:devel [system libs, tsan, gcc, bdb-only, libqt suppression]"
      install_matrix_script:
        - apt install -y libdb++-dev
        - cd bitcoin-core
        - echo 'race:libQt5Core' >> test/sanitizer_suppressions/tsan
        - echo 'race:libQt5Test' >> test/sanitizer_suppressions/tsan
        - ./configure --with-sanitizers=thread --with-incompatible-bdb || ( cat config.log && false)
  make_script:
    - cd bitcoin-core
    - make ${MAKEJOBS} ${GOAL} || ( echo "Build failure. Verbose build follows." && make ${GOAL} V=1 ; false )
  check_script:
    - cd bitcoin-core
    - export ASAN_OPTIONS="alloc_dealloc_mismatch=0"
    - export LSAN_OPTIONS="suppressions=$(pwd)/test/sanitizer_suppressions/lsan"
    - export TSAN_OPTIONS="suppressions=$(pwd)/test/sanitizer_suppressions/tsan:halt_on_error=1"
    - export UBSAN_OPTIONS="suppressions=$(pwd)/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1"
    - make check ${MAKEJOBS} VERBOSE=1
    - ./test/functional/test_runner.py $MAKEJOBS --exclude feature_dbcrash --extended --combinedlogslen=199999000 --quiet --failfast --timeout-factor=9
task:
  name: "Alpine [system libs]"
  container:
    image: alpine:latest
  env:
    LC_ALL: "C"
    MAKEJOBS: "-j8"
    TEST_RUNNER_PORT_MIN: "14000"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache
    CCACHE_SIZE: "200M"
    CCACHE_DIR: "/tmp/ccache_dir"
  ccache_cache:
    folder: "/tmp/ccache_dir"
  install_script:
    - apk --no-cache --update add e2fsprogs-extra autoconf automake g++ gcc git libtool make pkgconfig python3 boost-dev libevent-dev zeromq-dev qt5-qtbase-dev qt5-qttools-dev ccache
    - ccache --max-size=${CCACHE_SIZE}
  upstream_clone_script:
    - git clone https://github.com/bitcoin/bitcoin --depth=1 ./bitcoin-core
  configure_script:
    - cd bitcoin-core
    - ./autogen.sh
    - ./configure || ( cat config.log && false)
  make_script:
    - cd bitcoin-core
    - make ${MAKEJOBS} || ( echo "Build failure. Verbose build follows." && make V=1 ; false )
  check_script:
    - cd bitcoin-core
    - make check ${MAKEJOBS} VERBOSE=1
  functional_test_script:
    - cd bitcoin-core
    - ./test/functional/test_runner.py $MAKEJOBS --ci --extended --combinedlogslen=199999000 --quiet --failfast --timeout-factor=3
task:
  name: "Arch [system libs]"
  container:
    image: archlinux:latest
  env:
    MAKEJOBS: "-j8"
    TEST_RUNNER_PORT_MIN: "14000"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache
    CCACHE_SIZE: "200M"
    CCACHE_DIR: "/tmp/ccache_dir"
  ccache_cache:
    folder: "/tmp/ccache_dir"
  install_script:
    - pacman --noconfirm -Syu e2fsprogs autoconf automake git gcc libtool make pkg-config python3 boost libevent zeromq ccache qt5
    - ccache --max-size=${CCACHE_SIZE}
  upstream_clone_script:
    - git clone https://github.com/bitcoin/bitcoin --depth=1 ./bitcoin-core
  configure_script:
    - cd bitcoin-core
    - ./autogen.sh
    - ./configure || ( cat config.log && false)
  make_script:
    - cd bitcoin-core
    - make ${MAKEJOBS} || ( echo "Build failure. Verbose build follows." && make V=1 ; false )
  check_script:
    - cd bitcoin-core
    - make check ${MAKEJOBS} VERBOSE=1
  functional_test_script:
    - cd bitcoin-core
    - ./test/functional/test_runner.py $MAKEJOBS --ci --extended --combinedlogslen=199999000 --quiet --failfast --timeout-factor=3
task:
  name: "Android [no cache]"
  container:
    image: ubuntu:jammy
    cpu: 2
    memory: 8G
    greedy: true
  env:
    FILE_ENV: "./ci/test/00_setup_env_android.sh"
    MAKEJOBS: "-j10"
    DANGER_RUN_CI_ON_HOST: "1"
    TEST_RUNNER_PORT_MIN: "14000"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache
    CCACHE_SIZE: "200M"
    CCACHE_DIR: "/tmp/ccache_dir"
  ccache_cache:
    folder: "/tmp/ccache_dir"
  upstream_clone_script:
    - apt update && apt install python3 rsync git -y
    - git clone https://github.com/bitcoin/bitcoin --depth=1 ./bitcoin-core
    - cd bitcoin-core
  ci_script:
    - cd bitcoin-core
    - ./ci/test_run_all.sh
task:
  name: "Fedora [system libs]"
  container:
    image: fedora:rawhide
  env:
    CCACHE_SIZE: "200M"
    CCACHE_DIR: "/tmp/ccache_dir"
  ccache_cache:
    folder: "/tmp/ccache_dir"
  upstream_clone_script:
    - dnf install git -y
    - git clone https://github.com/bitcoin/bitcoin --depth=1 ./bitcoin-core
  install_pkgs_script:
    - dnf install e2fsprogs ccache gcc-c++ libtool make autoconf automake libevent-devel boost-devel libdb-cxx-devel python3 qt5-qttools-devel qt5-qtbase-devel sqlite-devel qrencode-devel systemtap zeromq-devel miniupnpc-devel libnatpmp-devel -y
  build_script:
    - cd bitcoin-core
    - ./autogen.sh && ./configure --enable-suppress-external-warnings --with-incompatible-bdb
    - make -j 9
  test_script:
    - cd bitcoin-core
    - make -j 9 check
    - ./test/functional/test_runner.py -j 9 --timeout-factor=5
task:
  name: "fuzz, asan, system libs [fedora]"
  container:
    image: fedora:rawhide
    cpu: 4
    memory: 8G
    greedy: true
  env:
    CCACHE_SIZE: "200M"
    CCACHE_DIR: "/tmp/ccache_dir"
  ccache_cache:
    folder: "/tmp/ccache_dir"
  upstream_clone_script:
    - dnf install git -y
    - git clone https://github.com/bitcoin/bitcoin --depth=1 ./bitcoin-core
    - git clone https://github.com/bitcoin-core/qa-assets --depth=1
  install_pkgs_script:
    - dnf install gcc-c++ libtool make autoconf automake libevent-devel boost-devel sqlite-devel python3 clang llvm qt5-qttools-devel qt5-qtbase-devel -y
  ci_script:
    - cd bitcoin-core
    - ./autogen.sh && ./configure --with-sanitizers=fuzzer,address,integer,undefined,float-divide-by-zero --enable-fuzz CC=clang CXX=clang++
    - make -j 8
  test_script:
    - cd bitcoin-core
    - export LSAN_OPTIONS="suppressions=$(pwd)/test/sanitizer_suppressions/lsan"
    - export TSAN_OPTIONS="suppressions=$(pwd)/test/sanitizer_suppressions/tsan:halt_on_error=1"
    - export UBSAN_OPTIONS="suppressions=$(pwd)/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1"
    - ./test/fuzz/test_runner.py -j 8 -l DEBUG ../qa-assets/fuzz_seed_corpus/
